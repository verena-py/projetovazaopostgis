# Generated by Django 3.2.6 on 2021-08-29 20:55

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='FeatureactionsNames',
            fields=[
                ('featureactionNamesid', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=500)),
            ],
            options={
                'verbose_name': 'feature action names',
                'db_table': 'odm2extra"."featureactionsNames',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeasurementresultvalueFile',
            fields=[
                ('valueFileid', models.AutoField(primary_key=True, serialize=False)),
                ('valueFile', models.FileField(upload_to='resultvalues', verbose_name='value file ')),
            ],
            options={
                'verbose_name': 'measurement result value file',
                'db_table': 'odm2extra"."Measurementresultvaluefile',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProcessDataloggerfile',
            fields=[
                ('processdataloggerfileid', models.AutoField(primary_key=True, serialize=False)),
                ('processingCode', models.CharField(default='0', help_text="to setup an FTP file download set the processingcode as 'download from ftp or http' to download the file from the FTP site. A datalogger file setup for FTP download must have only 1 process data logger file record.", max_length=255, verbose_name='processing code')),
                ('databeginson', models.IntegerField(default=2, verbose_name='Data begins on this row number')),
                ('columnheaderson', models.IntegerField(verbose_name='Column headers matching column labels from data logger columns on row')),
                ('date_processed', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'process data logger file',
                'db_table': 'odm2extra"."processdataloggerfile',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Timeseriesresultvaluesext',
            fields=[
                ('valueid', models.AutoField(primary_key=True, serialize=False)),
                ('datavalue', models.FloatField()),
                ('valuedatetime', models.DateTimeField()),
                ('valuedatetimeutcoffset', models.IntegerField()),
                ('timeaggregationinterval', models.FloatField(verbose_name='Time Interval')),
                ('samplingfeaturename', models.CharField(blank=True, max_length=255, null=True, verbose_name='sampling feature name')),
                ('processinglevelcode', models.CharField(max_length=50, verbose_name='processing level code')),
                ('variablecode', models.CharField(max_length=50, verbose_name='variable code')),
                ('unitsabbreviation', models.CharField(max_length=50, verbose_name='unit abbreviation')),
                ('aggregationstatisticname', models.CharField(max_length=255, verbose_name='aggregation statistic name')),
            ],
            options={
                'verbose_name': 'time series result value',
                'db_table': 'odm2extra"."timeseriesresultvaluesext',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Timeseriesresultvaluesextwannotations',
            fields=[
                ('valueid', models.AutoField(primary_key=True, serialize=False)),
                ('resultid', models.IntegerField()),
                ('datavalue', models.FloatField()),
                ('valuedatetime', models.DateTimeField()),
                ('valuedatetimeutcoffset', models.IntegerField()),
                ('censorcodecv', models.CharField(max_length=255)),
                ('qualitycodecv', models.CharField(max_length=255)),
                ('timeaggregationinterval', models.FloatField(verbose_name='Time Interval')),
                ('timeaggregationintervalunitsid', models.IntegerField()),
                ('samplingfeaturename', models.CharField(blank=True, max_length=255, null=True, verbose_name='sampling feature name')),
                ('samplingfeaturetypecv', models.CharField(max_length=255)),
                ('processinglevelcode', models.CharField(max_length=50, verbose_name='processing level code')),
                ('variablecode', models.CharField(max_length=50, verbose_name='variable code')),
                ('unitsabbreviation', models.CharField(max_length=50, verbose_name='unit abbreviation')),
                ('aggregationstatisticname', models.CharField(max_length=255, verbose_name='aggregation statistic name')),
                ('annotationtext', models.CharField(max_length=500)),
            ],
            options={
                'verbose_name': 'time series result value',
                'db_table': 'odm2extra"."timeseriesresultvaluesextwannotations',
                'managed': False,
            },
        ),
    ]
