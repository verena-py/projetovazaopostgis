# Generated by Django 3.2.6 on 2021-08-29 21:01

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('dadosodm2', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Actions',
            fields=[
                ('actionid', models.AutoField(primary_key=True, serialize=False)),
                ('begindatetime', models.DateTimeField(verbose_name='begin date time')),
                ('begindatetimeutcoffset', models.IntegerField(default='-4', verbose_name='begin date time clock off set (from GMT)')),
                ('enddatetime', models.DateTimeField(blank=True, null=True, verbose_name='end date time')),
                ('enddatetimeutcoffset', models.IntegerField(default='-4', verbose_name='end date time clock off set (from GMT)')),
                ('actiondescription', models.CharField(blank=True, max_length=5000, verbose_name='action description')),
                ('actionfilelink', models.CharField(blank=True, max_length=255, verbose_name='action file link')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Affiliations',
            fields=[
                ('affiliationid', models.AutoField(primary_key=True, serialize=False)),
                ('isprimaryorganizationcontact', models.NullBooleanField(verbose_name='primary organization contact? ')),
                ('affiliationstartdate', models.DateField(verbose_name='When affiliation began ')),
                ('affiliationenddate', models.DateField(blank=True, null=True, verbose_name='When affiliation ended')),
                ('primaryphone', models.CharField(blank=True, max_length=50, verbose_name='primary phone')),
                ('primaryemail', models.CharField(max_length=255, verbose_name='primary email')),
                ('primaryaddress', models.CharField(blank=True, max_length=255, verbose_name='primary address')),
                ('personlink', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'verbose_name': 'affiliation (relate people and organizations)',
                'verbose_name_plural': 'affiliation (relate people and organizations)',
                'ordering': ['-primaryemail'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Annotations',
            fields=[
                ('annotationid', models.AutoField(primary_key=True, serialize=False)),
                ('annotationcode', models.CharField(blank=True, max_length=50)),
                ('annotationtext', models.CharField(max_length=500)),
                ('annotationdatetime', models.DateTimeField(blank=True, null=True)),
                ('annotationutcoffset', models.IntegerField(blank=True, default='-4', null=True)),
                ('annotationlink', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'verbose_name': 'Annotation',
                'verbose_name_plural': 'Annotations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Categoricalresultvalues',
            fields=[
                ('valueid', models.AutoField(primary_key=True, serialize=False)),
                ('datavalue', models.CharField(max_length=255)),
                ('valuedatetime', models.DateTimeField()),
                ('valuedatetimeutcoffset', models.IntegerField()),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Citations',
            fields=[
                ('citationid', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('publisher', models.CharField(max_length=255)),
                ('publicationyear', models.IntegerField(verbose_name='year')),
                ('citationlink', models.CharField(blank=True, max_length=255, verbose_name='Citation Link')),
            ],
            options={
                'verbose_name': 'citation',
                'ordering': ['title'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvActiontype',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvAggregationstatistic',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvAnnotationtype',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvCensorcode',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvDataqualitytype',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvDatasettypecv',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvDirectivetype',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvElevationdatum',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvEquipmenttype',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvMedium',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvMethodtype',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvOrganizationtype',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvPropertydatatype',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvQualitycode',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvReferencematerialmedium',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'cv_referencematerialmedium',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvRelationshiptype',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvResulttype',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvSamplingfeaturegeotype',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'sampling feature geo type',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvSamplingfeaturetype',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'sampling feature type',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvSitetype',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvSpatialoffsettype',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvSpeciation',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvSpecimenmedium',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'cv_medium',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvSpecimentype',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvStatus',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvTaxonomicclassifiertype',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'taxonomic classifier',
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvUnitstype',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvVariablename',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CvVariabletype',
            fields=[
                ('term', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('definition', models.CharField(blank=True, max_length=10000, null=True)),
                ('category', models.CharField(blank=True, max_length=255, null=True)),
                ('sourcevocabularyuri', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['term', 'name'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Dataquality',
            fields=[
                ('dataqualityid', models.AutoField(primary_key=True, serialize=False)),
                ('dataqualitycode', models.CharField(help_text='for an alarm test include the word alarm. for a hard bounds check include the word bound (if a value falls below a lower limit, or exceeds a lower limit the value will be set to NaN (not a number). ', max_length=255, verbose_name='data quality code')),
                ('dataqualityvalue', models.FloatField(blank=True, null=True, verbose_name='data quality value')),
                ('dataqualitydescription', models.CharField(blank=True, max_length=5000, verbose_name='data quality description')),
                ('dataqualitylink', models.CharField(blank=True, max_length=255, verbose_name='data quality link')),
                ('dataqualitytypecv', models.ForeignKey(db_column='dataqualitytypecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvdataqualitytype', verbose_name='data quality type')),
            ],
            options={
                'verbose_name': 'data quality',
                'verbose_name_plural': 'data quality',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Datasets',
            fields=[
                ('datasetid', models.AutoField(primary_key=True, serialize=False)),
                ('datasetuuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('datasetcode', models.CharField(max_length=50, verbose_name='dataset code')),
                ('datasettitle', models.CharField(max_length=255, verbose_name='dataset title')),
                ('datasetabstract', models.CharField(max_length=5000, verbose_name='dataset abstract')),
                ('datasettypecv', models.ForeignKey(db_column='datasettypecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvdatasettypecv', verbose_name='dataset type')),
            ],
            options={
                'verbose_name': 'dataset',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Derivationequations',
            fields=[
                ('derivationequationid', models.AutoField(primary_key=True, serialize=False)),
                ('derivationequation', models.CharField(max_length=255, verbose_name='derivation equation')),
            ],
            options={
                'verbose_name': 'derivation equation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('equipmentid', models.AutoField(primary_key=True, serialize=False)),
                ('equipmentcode', models.CharField(max_length=50)),
                ('equipmentname', models.CharField(max_length=255)),
                ('equipmentserialnumber', models.CharField(max_length=50)),
                ('equipmentpurchasedate', models.DateTimeField()),
                ('equipmentpurchaseordernumber', models.CharField(blank=True, max_length=50)),
                ('equipmentdescription', models.CharField(blank=True, max_length=5000)),
                ('equipmentdocumentationlink', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Equipmentmodels',
            fields=[
                ('equipmentmodelid', models.AutoField(primary_key=True, serialize=False)),
                ('modelpartnumber', models.CharField(blank=True, max_length=50, verbose_name='model part number')),
                ('modelname', models.CharField(max_length=255, verbose_name='model name')),
                ('modeldescription', models.CharField(blank=True, max_length=5000, null=True, verbose_name='model description')),
                ('isinstrument', models.BooleanField(verbose_name='Is this an instrument?')),
                ('modelspecificationsfilelink', models.CharField(blank=True, max_length=255, verbose_name='link to manual for equipment')),
                ('modellink', models.CharField(blank=True, max_length=255, verbose_name='link to website for model')),
            ],
            options={
                'verbose_name': 'equipment model',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Extensionproperties',
            fields=[
                ('propertyid', models.AutoField(primary_key=True, serialize=False)),
                ('propertyname', models.CharField(max_length=255, verbose_name='property name')),
                ('propertydescription', models.CharField(blank=True, max_length=5000, verbose_name='property description')),
                ('propertydatatypecv', models.ForeignKey(db_column='propertydatatypecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvpropertydatatype', verbose_name='property data type')),
            ],
            options={
                'verbose_name': 'extension property',
                'verbose_name_plural': 'extension properties',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Externalidentifiersystems',
            fields=[
                ('externalidentifiersystemid', models.AutoField(primary_key=True, serialize=False)),
                ('externalidentifiersystemname', models.CharField(max_length=255)),
                ('externalidentifiersystemdescription', models.CharField(blank=True, max_length=5000)),
                ('externalidentifiersystemurl', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Featureactions',
            fields=[
                ('featureactionid', models.AutoField(primary_key=True, serialize=False, verbose_name='sampling feature action')),
                ('action', models.ForeignKey(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.actions')),
            ],
            options={
                'verbose_name': 'action at sampling feature',
                'verbose_name_plural': 'action at sampling feature',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Measurementresultvalues',
            fields=[
                ('valueid', models.AutoField(primary_key=True, serialize=False)),
                ('datavalue', models.FloatField(verbose_name='data value')),
                ('valuedatetime', models.DateTimeField(verbose_name='value date time')),
                ('valuedatetimeutcoffset', models.IntegerField(default='-4', verbose_name='value date time UTC offset')),
            ],
            options={
                'verbose_name': 'measurement result value',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Models',
            fields=[
                ('modelid', models.AutoField(primary_key=True, serialize=False)),
                ('modelcode', models.CharField(max_length=50)),
                ('modelname', models.CharField(max_length=255)),
                ('modeldescription', models.CharField(blank=True, max_length=5000)),
                ('version', models.CharField(blank=True, max_length=255)),
                ('modellink', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Organizations',
            fields=[
                ('organizationid', models.AutoField(primary_key=True, serialize=False)),
                ('organizationcode', models.CharField(max_length=50, verbose_name='organization code')),
                ('organizationname', models.CharField(max_length=255, verbose_name='organization name')),
                ('organizationdescription', models.CharField(blank=True, max_length=5000, verbose_name='organization description')),
                ('organizationlink', models.CharField(blank=True, max_length=255, verbose_name='organization web link')),
                ('organizationtypecv', models.ForeignKey(db_column='organizationtypecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvorganizationtype', verbose_name='organization type')),
                ('parentorganizationid', models.ForeignKey(blank=True, db_column='parentorganizationid', default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.organizations', verbose_name='parent organization')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='People',
            fields=[
                ('personid', models.AutoField(primary_key=True, serialize=False)),
                ('personfirstname', models.CharField(max_length=255, verbose_name='first name')),
                ('personmiddlename', models.CharField(blank=True, max_length=255, verbose_name='middle name')),
                ('personlastname', models.CharField(max_length=255, verbose_name='last name')),
            ],
            options={
                'verbose_name': 'people',
                'verbose_name_plural': 'people',
                'ordering': ['personlastname'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Processinglevels',
            fields=[
                ('processinglevelid', models.AutoField(primary_key=True, serialize=False)),
                ('processinglevelcode', models.CharField(help_text='This should be a number in order to export to hydroshare', max_length=50, verbose_name='processing level code')),
                ('definition', models.CharField(blank=True, max_length=5000)),
                ('explanation', models.CharField(blank=True, max_length=5000)),
            ],
            options={
                'verbose_name': 'processing level',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Referencematerials',
            fields=[
                ('referencematerialid', models.AutoField(primary_key=True, serialize=False)),
                ('referencematerialcode', models.CharField(max_length=50)),
                ('referencemateriallotcode', models.CharField(blank=True, max_length=255)),
                ('referencematerialpurchasedate', models.DateTimeField(blank=True, null=True)),
                ('referencematerialexpirationdate', models.DateTimeField(blank=True, null=True)),
                ('referencematerialcertificatelink', models.CharField(blank=True, max_length=255)),
                ('referencematerialmediumcv', models.ForeignKey(db_column='referencematerialmediumcv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvreferencematerialmedium')),
                ('referencematerialorganizationid', models.ForeignKey(db_column='referencematerialorganizationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.organizations')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Results',
            fields=[
                ('resultid', models.AutoField(primary_key=True, serialize=False, verbose_name='data result')),
                ('resultuuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('resultdatetime', models.DateTimeField(blank=True, null=True, verbose_name='Start result date time')),
                ('resultdatetimeutcoffset', models.BigIntegerField(default='-4', null=True, verbose_name='Start result date time UTC offset')),
                ('validdatetime', models.DateTimeField(blank=True, null=True, verbose_name='valid date time- Date and time for which the result is valid')),
                ('validdatetimeutcoffset', models.BigIntegerField(default='-4', null=True, verbose_name='valid date time UTC offset')),
                ('valuecount', models.IntegerField(verbose_name='number of recorded values')),
                ('featureactionid', models.ForeignKey(db_column='featureactionid', on_delete=django.db.models.deletion.CASCADE, related_name='feature_actions', to='dadosodm2.featureactions', verbose_name='sampling feature action')),
                ('processing_level', models.ForeignKey(db_column='processinglevelid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.processinglevels')),
                ('result_type', models.ForeignKey(db_column='resulttypecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvresulttype', verbose_name='result type')),
                ('sampledmediumcv', models.ForeignKey(blank=True, db_column='sampledmediumcv', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvmedium', verbose_name='sampled medium')),
                ('statuscv', models.ForeignKey(blank=True, db_column='statuscv', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvstatus', verbose_name='status')),
            ],
            options={
                'verbose_name': 'data result',
                'ordering': ['variableid'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Samplingfeatures',
            fields=[
                ('samplingfeatureid', models.AutoField(primary_key=True, serialize=False)),
                ('samplingfeatureuuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('samplingfeaturecode', models.CharField(max_length=50, verbose_name='sampling feature or location code')),
                ('samplingfeaturename', models.CharField(blank=True, max_length=255, null=True, verbose_name='sampling feature or location name')),
                ('samplingfeaturedescription', models.CharField(blank=True, max_length=5000, verbose_name='sampling feature or location description')),
                ('featuregeometry', models.TextField(blank=True, null=True, verbose_name='feature geometry')),
                ('elevation_m', models.FloatField(blank=True, null=True, verbose_name='elevation')),
                ('elevation_datum', models.ForeignKey(blank=True, db_column='elevationdatumcv', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvelevationdatum')),
                ('sampling_feature_geo_type', models.ForeignKey(db_column='samplingfeaturegeotypecv', default='Point', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvsamplingfeaturegeotype')),
                ('sampling_feature_type', models.ForeignKey(db_column='samplingfeaturetypecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvsamplingfeaturetype')),
            ],
            options={
                'verbose_name': 'sampling feature (location)',
                'ordering': ('sampling_feature_type', 'samplingfeaturename'),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Spatialreferences',
            fields=[
                ('spatialreferenceid', models.AutoField(primary_key=True, serialize=False, verbose_name='spatial reference id')),
                ('srscode', models.CharField(blank=True, max_length=50, verbose_name='spatial reference code')),
                ('srsname', models.CharField(max_length=255, verbose_name='spatial reference name')),
                ('srsdescription', models.CharField(blank=True, max_length=5000, verbose_name='spatial reference description')),
                ('srslink', models.CharField(blank=True, max_length=255, verbose_name='spatial reference link')),
            ],
            options={
                'verbose_name': 'Spatial reference',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Calibrationactions',
            fields=[
                ('actionid', models.OneToOneField(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dadosodm2.actions')),
                ('calibrationcheckvalue', models.FloatField(blank=True, null=True)),
                ('calibrationequation', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Categoricalresults',
            fields=[
                ('resultid', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dadosodm2.results')),
                ('xlocation', models.FloatField(blank=True, null=True)),
                ('xlocationunitsid', models.IntegerField(blank=True, null=True)),
                ('ylocation', models.FloatField(blank=True, null=True)),
                ('ylocationunitsid', models.IntegerField(blank=True, null=True)),
                ('zlocation', models.FloatField(blank=True, null=True)),
                ('zlocationunitsid', models.IntegerField(blank=True, null=True)),
                ('qualitycodecv', models.ForeignKey(db_column='qualitycodecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvqualitycode')),
                ('spatialreferenceid', models.ForeignKey(blank=True, db_column='spatialreferenceid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.spatialreferences')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Maintenanceactions',
            fields=[
                ('actionid', models.OneToOneField(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dadosodm2.actions')),
                ('isfactoryservice', models.BooleanField()),
                ('maintenancecode', models.CharField(blank=True, max_length=50)),
                ('maintenancereason', models.CharField(blank=True, max_length=500)),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Measurementresults',
            fields=[
                ('resultid', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dadosodm2.results', verbose_name='Result Series')),
                ('xlocation', models.FloatField(blank=True, null=True, verbose_name='x location')),
                ('ylocation', models.FloatField(blank=True, null=True, verbose_name='y location')),
                ('zlocation', models.FloatField(blank=True, null=True, verbose_name='z location')),
                ('timeaggregationinterval', models.FloatField(verbose_name='time aggregation interval')),
                ('aggregationstatisticcv', models.ForeignKey(db_column='aggregationstatisticcv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvaggregationstatistic', verbose_name='aggregation statistic')),
                ('censorcodecv', models.ForeignKey(db_column='censorcodecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvcensorcode', verbose_name='censor code')),
                ('qualitycodecv', models.ForeignKey(db_column='qualitycodecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvqualitycode', verbose_name='quality code')),
                ('spatialreferenceid', models.ForeignKey(blank=True, db_column='spatialreferenceid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.spatialreferences', verbose_name='spatial reference')),
            ],
            options={
                'verbose_name': 'measurement result',
                'ordering': ['censorcodecv', 'resultid'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Pointcoverageresults',
            fields=[
                ('resultid', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dadosodm2.results')),
                ('zlocation', models.FloatField(blank=True, null=True)),
                ('intendedxspacing', models.FloatField(blank=True, null=True)),
                ('intendedyspacing', models.FloatField(blank=True, null=True)),
                ('timeaggregationinterval', models.FloatField()),
                ('timeaggregationintervalunitsid', models.IntegerField()),
                ('aggregationstatisticcv', models.ForeignKey(db_column='aggregationstatisticcv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvaggregationstatistic')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Profileresults',
            fields=[
                ('resultid', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dadosodm2.results', verbose_name='result')),
                ('xlocation', models.FloatField(blank=True, null=True, verbose_name='x location')),
                ('ylocation', models.FloatField(blank=True, null=True, verbose_name='y location')),
                ('intendedzspacing', models.FloatField(blank=True, null=True, verbose_name='intended depth')),
                ('intendedtimespacing', models.FloatField(blank=True, null=True, verbose_name='intended time spacing')),
                ('aggregationstatisticcv', models.ForeignKey(db_column='aggregationstatisticcv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvaggregationstatistic', verbose_name='aggregation statistic')),
            ],
            options={
                'verbose_name': 'profile result',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Sectionresults',
            fields=[
                ('resultid', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dadosodm2.results')),
                ('ylocation', models.FloatField(blank=True, null=True)),
                ('intendedxspacing', models.FloatField(blank=True, null=True)),
                ('intendedzspacing', models.FloatField(blank=True, null=True)),
                ('intendedtimespacing', models.FloatField(blank=True, null=True)),
                ('aggregationstatisticcv', models.ForeignKey(db_column='aggregationstatisticcv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvaggregationstatistic')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Specimenbatchpostions',
            fields=[
                ('featureactionid', models.OneToOneField(db_column='featureactionid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dadosodm2.featureactions')),
                ('batchpositionnumber', models.IntegerField()),
                ('batchpositionlabel', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Specimens',
            fields=[
                ('samplingfeatureid', models.OneToOneField(db_column='samplingfeatureid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dadosodm2.samplingfeatures')),
                ('isfieldspecimen', models.BooleanField()),
                ('specimenmediumcv', models.ForeignKey(db_column='specimenmediumcv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvspecimenmedium')),
                ('specimentypecv', models.ForeignKey(db_column='specimentypecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvspecimentype')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Spectraresults',
            fields=[
                ('resultid', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dadosodm2.results')),
                ('xlocation', models.FloatField(blank=True, null=True)),
                ('ylocation', models.FloatField(blank=True, null=True)),
                ('zlocation', models.FloatField(blank=True, null=True)),
                ('intendedwavelengthspacing', models.FloatField(blank=True, null=True)),
                ('aggregationstatisticcv', models.ForeignKey(db_column='aggregationstatisticcv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvaggregationstatistic')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Timeseriesresults',
            fields=[
                ('resultid', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dadosodm2.results', verbose_name='Result Series')),
                ('xlocation', models.FloatField(blank=True, null=True, verbose_name='x location')),
                ('ylocation', models.FloatField(blank=True, null=True, verbose_name='y location')),
                ('zlocation', models.FloatField(blank=True, null=True, verbose_name='z location')),
                ('intendedtimespacing', models.FloatField(blank=True, help_text='time between measurements', null=True, verbose_name='Intended time spacing')),
                ('aggregationstatisticcv', models.ForeignKey(db_column='aggregationstatisticcv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvaggregationstatistic')),
            ],
            options={
                'verbose_name': 'time series result',
                'ordering': ['resultid'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Trajectoryresults',
            fields=[
                ('resultid', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dadosodm2.results')),
                ('intendedtrajectoryspacing', models.FloatField(blank=True, null=True)),
                ('intendedtimespacing', models.FloatField(blank=True, null=True)),
                ('aggregationstatisticcv', models.ForeignKey(db_column='aggregationstatisticcv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvaggregationstatistic')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Transectresults',
            fields=[
                ('resultid', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dadosodm2.results')),
                ('zlocation', models.FloatField(blank=True, null=True)),
                ('intendedtransectspacing', models.FloatField(blank=True, null=True)),
                ('intendedtimespacing', models.FloatField(blank=True, null=True)),
                ('aggregationstatisticcv', models.ForeignKey(db_column='aggregationstatisticcv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvaggregationstatistic')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Variables',
            fields=[
                ('variableid', models.AutoField(primary_key=True, serialize=False)),
                ('variablecode', models.CharField(max_length=50, verbose_name='variable code')),
                ('variabledefinition', models.CharField(blank=True, max_length=500, verbose_name='variable definition')),
                ('nodatavalue', models.FloatField(verbose_name='no data value')),
                ('speciation', models.ForeignKey(blank=True, db_column='speciationcv', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvspeciation')),
                ('variable_name', models.ForeignKey(db_column='variablenamecv', help_text='view variable names here http://vocabulary.odm2.org/variablename/', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvvariablename')),
                ('variable_type', models.ForeignKey(db_column='variabletypecv', help_text='view variable types here http://vocabulary.odm2.org/variabletype/ ', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvvariabletype')),
            ],
            options={
                'verbose_name': 'variable',
                'ordering': ('variablecode', 'variable_name'),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Variableexternalidentifiers',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('variableexternalidentifier', models.CharField(max_length=255)),
                ('variableexternalidentifieruri', models.CharField(blank=True, max_length=255)),
                ('externalidentifiersystemid', models.ForeignKey(db_column='externalidentifiersystemid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.externalidentifiersystems')),
                ('variableid', models.ForeignKey(db_column='variableid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.variables')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Variableextensionpropertyvalues',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('propertyvalue', models.CharField(max_length=255)),
                ('propertyid', models.ForeignKey(db_column='propertyid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.extensionproperties')),
                ('variableid', models.ForeignKey(db_column='variableid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.variables')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Units',
            fields=[
                ('unitsid', models.AutoField(primary_key=True, serialize=False)),
                ('unitsabbreviation', models.CharField(max_length=50, verbose_name='unit abbreviation')),
                ('unitsname', models.CharField(max_length=255, verbose_name='unit name')),
                ('unitslink', models.CharField(blank=True, max_length=255, verbose_name='reference for the unit (web link)')),
                ('unit_type', models.ForeignKey(db_column='unitstypecv', help_text='A vocabulary for describing the type of the Unit or the more general quantity that the Unit represents. View unit type details here http://vocabulary.odm2.org/unitstype/', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvunitstype')),
            ],
            options={
                'verbose_name': 'unit',
                'ordering': ('unitsabbreviation', 'unitsname'),
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Transectresultvalues',
            fields=[
                ('valueid', models.AutoField(primary_key=True, serialize=False)),
                ('datavalue', models.FloatField()),
                ('valuedatetime', models.DateTimeField()),
                ('valuedatetimeutcoffset', models.DateTimeField()),
                ('xlocation', models.FloatField()),
                ('ylocation', models.FloatField()),
                ('transectdistance', models.FloatField()),
                ('transectdistanceaggregationinterval', models.FloatField()),
                ('timeaggregationinterval', models.FloatField()),
                ('aggregationstatisticcv', models.ForeignKey(db_column='aggregationstatisticcv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvaggregationstatistic')),
                ('censorcodecv', models.ForeignKey(db_column='censorcodecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvcensorcode')),
                ('qualitycodecv', models.ForeignKey(db_column='qualitycodecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvqualitycode')),
                ('timeaggregationintervalunitsid', models.ForeignKey(db_column='timeaggregationintervalunitsid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units')),
                ('transectdistanceunitsid', models.ForeignKey(db_column='transectdistanceunitsid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units')),
                ('xlocationunitsid', models.ForeignKey(db_column='xlocationunitsid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units')),
                ('ylocationunitsid', models.ForeignKey(db_column='ylocationunitsid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units')),
                ('resultid', models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.transectresults')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Transectresultvalueannotations',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('annotationid', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.annotations')),
                ('valueid', models.ForeignKey(db_column='valueid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.transectresultvalues')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Trajectoryresultvalues',
            fields=[
                ('valueid', models.AutoField(primary_key=True, serialize=False)),
                ('datavalue', models.FloatField()),
                ('valuedatetime', models.DateTimeField()),
                ('valuedatetimeutcoffset', models.IntegerField()),
                ('xlocation', models.FloatField()),
                ('ylocation', models.FloatField()),
                ('zlocation', models.FloatField()),
                ('trajectorydistance', models.FloatField()),
                ('trajectorydistanceaggregationinterval', models.FloatField()),
                ('timeaggregationinterval', models.FloatField()),
                ('censorcodecv', models.ForeignKey(db_column='censorcodecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvcensorcode')),
                ('qualitycodecv', models.ForeignKey(db_column='qualitycodecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvqualitycode')),
                ('timeaggregationintervalunitsid', models.ForeignKey(db_column='timeaggregationintervalunitsid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units')),
                ('trajectorydistanceunitsid', models.ForeignKey(db_column='trajectorydistanceunitsid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units')),
                ('xlocationunitsid', models.ForeignKey(db_column='xlocationunitsid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units')),
                ('ylocationunitsid', models.ForeignKey(db_column='ylocationunitsid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units')),
                ('zlocationunitsid', models.ForeignKey(db_column='zlocationunitsid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units')),
                ('resultid', models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.trajectoryresults')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Trajectoryresultvalueannotations',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('annotationid', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.annotations')),
                ('valueid', models.ForeignKey(db_column='valueid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.trajectoryresultvalues')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Timeseriesresultvalues',
            fields=[
                ('valueid', models.AutoField(primary_key=True, serialize=False)),
                ('datavalue', models.FloatField()),
                ('valuedatetime', models.DateTimeField()),
                ('valuedatetimeutcoffset', models.IntegerField()),
                ('timeaggregationinterval', models.FloatField(verbose_name='Time Interval')),
                ('censorcodecv', models.ForeignKey(db_column='censorcodecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvcensorcode')),
                ('qualitycodecv', models.ForeignKey(db_column='qualitycodecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvqualitycode')),
                ('timeaggregationintervalunitsid', models.ForeignKey(db_column='timeaggregationintervalunitsid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units', verbose_name='Time Units')),
                ('resultid', models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.timeseriesresults')),
            ],
            options={
                'verbose_name': 'time series result value',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Timeseriesresultvalueannotations',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('annotationid', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.annotations')),
                ('valueid', models.ForeignKey(db_column='valueid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.timeseriesresultvalues')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Taxonomicclassifiers',
            fields=[
                ('taxonomicclassifierid', models.AutoField(primary_key=True, serialize=False)),
                ('taxonomicclassifiername', models.CharField(max_length=255, verbose_name='taxonomic classifier name')),
                ('taxonomicclassifiercommonname', models.CharField(blank=True, max_length=255, verbose_name='taxonomic classifier common name')),
                ('taxonomicclassifierdescription', models.CharField(blank=True, max_length=5000, verbose_name='taxonomic classifier description')),
                ('parent_taxonomic_classifier', models.ForeignKey(blank=True, db_column='parenttaxonomicclassifierid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.taxonomicclassifiers')),
                ('taxonomic_classifier_type', models.ForeignKey(db_column='taxonomicclassifiertypecv', help_text='A vocabulary for describing types of taxonomies from which descriptive terms used in an ODM2 database have been drawn. Taxonomic classifiers provide a way to classify Results and Specimens according to terms from a formal taxonomy.. Check http://vocabulary.odm2.org/taxonomicclassifiertype/  for more info', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvtaxonomicclassifiertype')),
            ],
            options={
                'verbose_name': 'taxonomic classifier',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Taxonomicclassifierexternalidentifiers',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('taxonomicclassifierexternalidentifier', models.CharField(max_length=255)),
                ('taxonomicclassifierexternalidentifieruri', models.CharField(blank=True, max_length=255)),
                ('externalidentifiersystemid', models.ForeignKey(db_column='externalidentifiersystemid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.externalidentifiersystems')),
                ('taxonomicclassifierid', models.ForeignKey(db_column='taxonomicclassifierid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.taxonomicclassifiers')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Spectraresultvalues',
            fields=[
                ('valueid', models.AutoField(primary_key=True, serialize=False)),
                ('datavalue', models.FloatField()),
                ('valuedatetime', models.DateTimeField()),
                ('valuedatetimeutcoffset', models.IntegerField()),
                ('excitationwavelength', models.FloatField()),
                ('emissionwavelength', models.FloatField()),
                ('timeaggregationinterval', models.FloatField()),
                ('censorcodecv', models.ForeignKey(db_column='censorcodecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvcensorcode')),
                ('qualitycodecv', models.ForeignKey(db_column='qualitycodecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvqualitycode')),
                ('timeaggregationintervalunitsid', models.ForeignKey(db_column='timeaggregationintervalunitsid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units')),
                ('wavelengthunitsid', models.ForeignKey(db_column='wavelengthunitsid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units')),
                ('resultid', models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.spectraresults')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Spectraresultvalueannotations',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('annotationid', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.annotations')),
                ('valueid', models.ForeignKey(db_column='valueid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.spectraresultvalues')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Spatialreferenceexternalidentifiers',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('spatialreferenceexternalidentifier', models.CharField(max_length=255)),
                ('spatialreferenceexternalidentifieruri', models.CharField(blank=True, max_length=255)),
                ('externalidentifiersystemid', models.ForeignKey(db_column='externalidentifiersystemid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.externalidentifiersystems')),
                ('spatialreferenceid', models.ForeignKey(db_column='spatialreferenceid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.spatialreferences')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Spatialoffsets',
            fields=[
                ('spatialoffsetid', models.AutoField(primary_key=True, serialize=False)),
                ('offset1value', models.FloatField()),
                ('offset2value', models.FloatField(blank=True, null=True)),
                ('offset3value', models.FloatField(blank=True, null=True)),
                ('offset1unitid', models.ForeignKey(db_column='offset1unitid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units')),
                ('offset2unitid', models.ForeignKey(blank=True, db_column='offset2unitid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units')),
                ('offset3unitid', models.ForeignKey(blank=True, db_column='offset3unitid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units')),
                ('spatialoffsettypecv', models.ForeignKey(db_column='spatialoffsettypecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvspatialoffsettype')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Simulations',
            fields=[
                ('simulationid', models.AutoField(primary_key=True, serialize=False)),
                ('simulationname', models.CharField(max_length=255)),
                ('simulationdescription', models.CharField(blank=True, max_length=5000)),
                ('simulationstartdatetime', models.DateTimeField()),
                ('simulationstartdatetimeutcoffset', models.IntegerField()),
                ('simulationenddatetime', models.DateTimeField()),
                ('simulationenddatetimeutcoffset', models.IntegerField()),
                ('timestepvalue', models.FloatField()),
                ('timestepunitsid', models.IntegerField()),
                ('inputdatasetid', models.IntegerField(blank=True, null=True)),
                ('actionid', models.ForeignKey(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.actions')),
                ('modelid', models.ForeignKey(db_column='modelid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.models')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Sectionresultvalues',
            fields=[
                ('valueid', models.AutoField(primary_key=True, serialize=False)),
                ('datavalue', models.FloatField()),
                ('valuedatetime', models.BigIntegerField()),
                ('valuedatetimeutcoffset', models.BigIntegerField()),
                ('xlocation', models.FloatField()),
                ('xaggregationinterval', models.FloatField()),
                ('zlocation', models.BigIntegerField()),
                ('zaggregationinterval', models.FloatField()),
                ('timeaggregationinterval', models.FloatField()),
                ('aggregationstatisticcv', models.ForeignKey(db_column='aggregationstatisticcv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvaggregationstatistic')),
                ('censorcodecv', models.ForeignKey(db_column='censorcodecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvcensorcode')),
                ('qualitycodecv', models.ForeignKey(db_column='qualitycodecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvqualitycode')),
                ('timeaggregationintervalunitsid', models.ForeignKey(db_column='timeaggregationintervalunitsid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units')),
                ('xlocationunitsid', models.ForeignKey(db_column='xlocationunitsid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units')),
                ('zlocationunitsid', models.ForeignKey(db_column='zlocationunitsid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units')),
                ('resultid', models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.sectionresults')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Sectionresultvalueannotations',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('annotationid', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.annotations')),
                ('valueid', models.ForeignKey(db_column='valueid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.sectionresultvalues')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Samplingfeatureexternalidentifiers',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('samplingfeatureexternalidentifier', models.CharField(max_length=255)),
                ('samplingfeatureexternalidentifieruri', models.CharField(blank=True, max_length=255)),
                ('externalidentifiersystemid', models.ForeignKey(db_column='externalidentifiersystemid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.externalidentifiersystems')),
                ('samplingfeatureid', models.ForeignKey(db_column='samplingfeatureid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.samplingfeatures')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Samplingfeatureextensionpropertyvalues',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('propertyvalue', models.CharField(max_length=255)),
                ('propertyid', models.ForeignKey(db_column='propertyid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.extensionproperties')),
                ('samplingfeatureid', models.ForeignKey(db_column='samplingfeatureid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.samplingfeatures')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Samplingfeatureannotations',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('annotationid', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.annotations')),
                ('samplingfeatureid', models.ForeignKey(db_column='samplingfeatureid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.samplingfeatures')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Resultsdataquality',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('dataqualityid', models.ForeignKey(db_column='dataqualityid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.dataquality', verbose_name='data quality')),
                ('resultid', models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.results', verbose_name='result')),
            ],
            options={
                'verbose_name': 'results data quality',
                'verbose_name_plural': 'results data quality',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='results',
            name='taxonomicclassifierid',
            field=models.ForeignKey(blank=True, db_column='taxonomicclassifierid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.taxonomicclassifiers', verbose_name='taxonomic classifier'),
        ),
        migrations.AddField(
            model_name='results',
            name='unitsid',
            field=models.ForeignKey(db_column='unitsid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units', verbose_name='units'),
        ),
        migrations.AddField(
            model_name='results',
            name='variableid',
            field=models.ForeignKey(db_column='variableid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.variables', verbose_name='variable'),
        ),
        migrations.CreateModel(
            name='Resultextensionpropertyvalues',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('propertyvalue', models.CharField(max_length=255)),
                ('propertyid', models.ForeignKey(db_column='propertyid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.extensionproperties')),
                ('resultid', models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.results')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Resultannotations',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('begindatetime', models.DateTimeField()),
                ('enddatetime', models.DateTimeField()),
                ('annotationid', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.annotations')),
                ('resultid', models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.results')),
            ],
            options={
                'verbose_name': 'Result Annotation',
                'verbose_name_plural': 'Result Annotations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Relatedresults',
            fields=[
                ('relationid', models.AutoField(primary_key=True, serialize=False)),
                ('versioncode', models.CharField(blank=True, max_length=50, verbose_name='version code')),
                ('relatedresultsequencenumber', models.IntegerField(blank=True, null=True, verbose_name='related result sequence number')),
                ('relatedresultid', models.ForeignKey(db_column='relatedresultid', on_delete=django.db.models.deletion.CASCADE, related_name='RelatedResult', to='dadosodm2.results', verbose_name='related data result')),
                ('relationshiptypecv', models.ForeignKey(db_column='relationshiptypecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvrelationshiptype', verbose_name='relationship type')),
                ('resultid', models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.results', verbose_name='data result')),
            ],
            options={
                'verbose_name': 'related result',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Relatedmodels',
            fields=[
                ('relatedid', models.AutoField(primary_key=True, serialize=False)),
                ('relatedmodelid', models.IntegerField()),
                ('modelid', models.ForeignKey(db_column='modelid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.models')),
                ('relationshiptypecv', models.ForeignKey(db_column='relationshiptypecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvrelationshiptype')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Relatedfeatures',
            fields=[
                ('relationid', models.AutoField(primary_key=True, serialize=False)),
                ('relatedfeatureid', models.ForeignKey(db_column='relatedfeatureid', on_delete=django.db.models.deletion.CASCADE, related_name='RelatedFeatures', to='dadosodm2.samplingfeatures', verbose_name='second feature')),
                ('relationshiptypecv', models.ForeignKey(db_column='relationshiptypecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvrelationshiptype', verbose_name='relationship type')),
                ('samplingfeatureid', models.ForeignKey(db_column='samplingfeatureid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.samplingfeatures', verbose_name='first feature')),
                ('spatialoffsetid', models.ForeignKey(blank=True, db_column='spatialoffsetid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.spatialoffsets', verbose_name='spatial offset')),
            ],
            options={
                'verbose_name': 'relate two feature',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Relatedequipment',
            fields=[
                ('relationid', models.AutoField(primary_key=True, serialize=False)),
                ('relationshipstartdatetime', models.DateTimeField()),
                ('relationshipstartdatetimeutcoffset', models.IntegerField()),
                ('relationshipenddatetime', models.DateTimeField(blank=True, null=True)),
                ('relationshipenddatetimeutcoffset', models.IntegerField(blank=True, default='-4', null=True)),
                ('equipmentid', models.ForeignKey(db_column='equipmentid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.equipment')),
                ('relatedequipmentid', models.ForeignKey(db_column='relatedequipmentid', on_delete=django.db.models.deletion.CASCADE, related_name='RelatedEquipment', to='dadosodm2.equipment')),
                ('relationshiptypecv', models.ForeignKey(db_column='relationshiptypecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvrelationshiptype')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Relateddatasets',
            fields=[
                ('relationid', models.AutoField(primary_key=True, serialize=False)),
                ('versioncode', models.CharField(blank=True, max_length=50)),
                ('datasetid', models.ForeignKey(db_column='datasetid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.datasets')),
                ('relateddatasetid', models.ForeignKey(db_column='relateddatasetid', on_delete=django.db.models.deletion.CASCADE, related_name='relatedDataset', to='dadosodm2.datasets')),
                ('relationshiptypecv', models.ForeignKey(db_column='relationshiptypecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvrelationshiptype')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Relatedcitations',
            fields=[
                ('relationid', models.AutoField(primary_key=True, serialize=False)),
                ('citationid', models.ForeignKey(db_column='citationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.citations')),
                ('relatedcitationid', models.ForeignKey(db_column='relatedcitationid', on_delete=django.db.models.deletion.CASCADE, related_name='RelatedCitations', to='dadosodm2.citations')),
                ('relationshiptypecv', models.ForeignKey(db_column='relationshiptypecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvrelationshiptype')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Relatedannotations',
            fields=[
                ('relationid', models.AutoField(primary_key=True, serialize=False)),
                ('annotationid', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.annotations')),
                ('relatedannotationid', models.ForeignKey(db_column='relatedannotationid', on_delete=django.db.models.deletion.CASCADE, related_name='RelatedAnnotations', to='dadosodm2.annotations')),
                ('relationshiptypecv', models.ForeignKey(db_column='relationshiptypecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvrelationshiptype')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Relatedactions',
            fields=[
                ('relationid', models.AutoField(primary_key=True, serialize=False)),
                ('actionid', models.ForeignKey(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.actions', verbose_name='action')),
                ('relatedactionid', models.ForeignKey(db_column='relatedactionid', on_delete=django.db.models.deletion.CASCADE, related_name='RelatedActions', to='dadosodm2.actions', verbose_name='related action')),
                ('relationshiptypecv', models.ForeignKey(db_column='relationshiptypecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvrelationshiptype', verbose_name='relationship type')),
            ],
            options={
                'verbose_name': 'related action (associates one action with another)',
                'verbose_name_plural': 'related action (associates one action with another)',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Referencematerialvalues',
            fields=[
                ('referencematerialvalueid', models.AutoField(primary_key=True, serialize=False)),
                ('referencematerialvalue', models.FloatField()),
                ('referencematerialaccuracy', models.FloatField(blank=True, null=True)),
                ('citationid', models.ForeignKey(db_column='citationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.citations')),
                ('referencematerialid', models.ForeignKey(db_column='referencematerialid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.referencematerials')),
                ('unitsid', models.ForeignKey(db_column='unitsid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units')),
                ('variableid', models.ForeignKey(db_column='variableid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.variables')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='referencematerials',
            name='samplingfeatureid',
            field=models.ForeignKey(blank=True, db_column='samplingfeatureid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.samplingfeatures'),
        ),
        migrations.CreateModel(
            name='Referencematerialexternalidentifiers',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('referencematerialexternalidentifier', models.CharField(max_length=255)),
                ('referencematerialexternalidentifieruri', models.CharField(blank=True, max_length=255)),
                ('externalidentifiersystemid', models.ForeignKey(db_column='externalidentifiersystemid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.externalidentifiersystems')),
                ('referencematerialid', models.ForeignKey(db_column='referencematerialid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.referencematerials')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Profileresultvalues',
            fields=[
                ('valueid', models.AutoField(primary_key=True, serialize=False)),
                ('datavalue', models.FloatField(verbose_name='data value')),
                ('valuedatetime', models.DateTimeField(blank=True, null=True, verbose_name='value date and time')),
                ('valuedatetimeutcoffset', models.IntegerField(blank=True, default='-4', null=True, verbose_name='value date and time UTC offset')),
                ('zlocation', models.FloatField(blank=True, null=True, verbose_name='z location')),
                ('zaggregationinterval', models.FloatField(blank=True, null=True, verbose_name='z aggregation interval')),
                ('timeaggregationinterval', models.FloatField(blank=True, null=True, verbose_name='time aggregation interval')),
                ('censorcodecv', models.ForeignKey(db_column='censorcodecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvcensorcode', verbose_name='censor code')),
                ('qualitycodecv', models.ForeignKey(db_column='qualitycodecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvqualitycode', verbose_name='quality code')),
                ('timeaggregationintervalunitsid', models.ForeignKey(blank=True, db_column='timeaggregationintervalunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units', verbose_name='time aggregation interval unit')),
                ('zlocationunitsid', models.ForeignKey(blank=True, db_column='zlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units', verbose_name='z location unit')),
                ('resultid', models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.profileresults')),
            ],
            options={
                'verbose_name': 'profile result value',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Profileresultvalueannotations',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('annotationid', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.annotations')),
                ('valueid', models.ForeignKey(db_column='valueid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.profileresultvalues')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Pointcoverageresultvalues',
            fields=[
                ('valueid', models.AutoField(primary_key=True, serialize=False)),
                ('datavalue', models.BigIntegerField()),
                ('valuedatetime', models.DateTimeField()),
                ('valuedatetimeutcoffset', models.IntegerField()),
                ('xlocation', models.FloatField()),
                ('ylocation', models.FloatField()),
                ('censorcodecv', models.ForeignKey(db_column='censorcodecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvcensorcode')),
                ('qualitycodecv', models.ForeignKey(db_column='qualitycodecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvqualitycode')),
                ('xlocationunitsid', models.ForeignKey(db_column='xlocationunitsid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units')),
                ('ylocationunitsid', models.ForeignKey(db_column='ylocationunitsid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units')),
                ('resultid', models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.pointcoverageresults')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Pointcoverageresultvalueannotations',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('annotationid', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.annotations')),
                ('valueid', models.ForeignKey(db_column='valueid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.pointcoverageresultvalues')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Personexternalidentifiers',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('personexternalidentifier', models.CharField(max_length=255)),
                ('personexternalidentifieruri', models.CharField(blank=True, max_length=255)),
                ('externalidentifiersystemid', models.ForeignKey(db_column='externalidentifiersystemid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.externalidentifiersystems')),
                ('personid', models.ForeignKey(db_column='personid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.people')),
            ],
            options={
                'verbose_name_plural': 'ORCID (Person Unique Identifier)',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Modelaffiliations',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('isprimary', models.BooleanField()),
                ('roledescription', models.CharField(blank=True, max_length=5000)),
                ('affiliationid', models.ForeignKey(db_column='affiliationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.affiliations')),
                ('modelid', models.ForeignKey(db_column='modelid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.models')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Methods',
            fields=[
                ('methodid', models.AutoField(primary_key=True, serialize=False)),
                ('methodcode', models.CharField(max_length=50, verbose_name='method code')),
                ('methodname', models.CharField(max_length=255, verbose_name='method name')),
                ('methoddescription', models.CharField(blank=True, max_length=5000, verbose_name='method description')),
                ('methodlink', models.CharField(blank=True, max_length=255, verbose_name='web link for method')),
                ('methodtypecv', models.ForeignKey(db_column='methodtypecv', help_text='A vocabulary for describing types of Methods associated with creating observations. MethodTypes correspond with ActionTypes in ODM2. An Action must be performed using an appropriate MethodType - e.g., a specimen collection Action should be associated with a specimen collection method. details for individual values here: http://vocabulary.odm2.org/methodtype/', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvmethodtype', verbose_name='method type')),
                ('organizationid', models.ForeignKey(blank=True, db_column='organizationid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.organizations', verbose_name='organization')),
            ],
            options={
                'verbose_name': 'method',
                'ordering': ['methodname'],
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Methodexternalidentifiers',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('methodexternalidentifier', models.CharField(max_length=255)),
                ('methodexternalidentifieruri', models.CharField(blank=True, max_length=255)),
                ('externalidentifiersystemid', models.ForeignKey(db_column='externalidentifiersystemid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.externalidentifiersystems')),
                ('methodid', models.ForeignKey(db_column='methodid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.methods')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Methodextensionpropertyvalues',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('propertyvalue', models.CharField(max_length=255)),
                ('methodid', models.ForeignKey(db_column='methodid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.methods')),
                ('propertyid', models.ForeignKey(db_column='propertyid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.extensionproperties')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Methodcitations',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('citationid', models.ForeignKey(db_column='citationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.citations', verbose_name='citation')),
                ('methodid', models.ForeignKey(db_column='methodid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.methods', verbose_name='method')),
                ('relationshiptypecv', models.ForeignKey(db_column='relationshiptypecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvrelationshiptype', verbose_name='relationship type')),
            ],
            options={
                'verbose_name': 'method citation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Methodannotations',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('annotationid', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.annotations')),
                ('methodid', models.ForeignKey(db_column='methodid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.methods')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Measurementresultvalueannotations',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('annotationid', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.annotations')),
                ('valueid', models.ForeignKey(db_column='valueid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.measurementresultvalues')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Instrumentoutputvariables',
            fields=[
                ('instrumentoutputvariableid', models.AutoField(primary_key=True, serialize=False)),
                ('instrumentresolution', models.CharField(blank=True, max_length=255, verbose_name='instrument resolution')),
                ('instrumentaccuracy', models.CharField(blank=True, max_length=255, verbose_name='instrument accuracy')),
                ('instrumentmethodid', models.ForeignKey(db_column='instrumentmethodid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.methods', verbose_name='instrument method')),
                ('instrumentrawoutputunitsid', models.ForeignKey(db_column='instrumentrawoutputunitsid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units', verbose_name='instrument raw output unit')),
                ('modelid', models.ForeignKey(db_column='modelid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.equipmentmodels', verbose_name='equipment model')),
                ('variableid', models.ForeignKey(db_column='variableid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.variables', verbose_name='variable')),
            ],
            options={
                'verbose_name': 'instrument output variable',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='featureactions',
            name='samplingfeatureid',
            field=models.ForeignKey(db_column='samplingfeatureid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.samplingfeatures'),
        ),
        migrations.AddField(
            model_name='externalidentifiersystems',
            name='identifiersystemorganizationid',
            field=models.ForeignKey(db_column='identifiersystemorganizationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.organizations'),
        ),
        migrations.AddField(
            model_name='extensionproperties',
            name='propertyunitsid',
            field=models.ForeignKey(blank=True, db_column='propertyunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.units', verbose_name='units for property'),
        ),
        migrations.CreateModel(
            name='Equipmentused',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('actionid', models.ForeignKey(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.actions')),
                ('equipmentid', models.ForeignKey(db_column='equipmentid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.equipment')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='equipmentmodels',
            name='modelmanufacturerid',
            field=models.ForeignKey(db_column='modelmanufacturerid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.organizations', verbose_name='model manufacturer'),
        ),
        migrations.CreateModel(
            name='Equipmentannotations',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('annotationid', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.annotations')),
                ('equipmentid', models.ForeignKey(db_column='equipmentid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.equipment')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='equipment',
            name='equipmentmodelid',
            field=models.ForeignKey(db_column='equipmentmodelid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.equipmentmodels'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='equipmentownerid',
            field=models.ForeignKey(db_column='equipmentownerid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.people'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='equipmenttypecv',
            field=models.ForeignKey(db_column='equipmenttypecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvequipmenttype'),
        ),
        migrations.AddField(
            model_name='equipment',
            name='equipmentvendorid',
            field=models.ForeignKey(db_column='equipmentvendorid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.organizations'),
        ),
        migrations.CreateModel(
            name='Directives',
            fields=[
                ('directiveid', models.AutoField(primary_key=True, serialize=False)),
                ('directivedescription', models.CharField(max_length=500)),
                ('directivetypecv', models.ForeignKey(db_column='directivetypecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvdirectivetype')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Datasetsresults',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('datasetid', models.ForeignKey(db_column='datasetid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.datasets', verbose_name='dataset')),
                ('resultid', models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.results', verbose_name='add the dataset to the result')),
            ],
            options={
                'verbose_name': 'dataset result',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Datasetcitations',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('citationid', models.ForeignKey(db_column='citationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.citations', verbose_name='citation')),
                ('datasetid', models.ForeignKey(db_column='datasetid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.datasets', verbose_name='dataset')),
                ('relationshiptypecv', models.ForeignKey(db_column='relationshiptypecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvrelationshiptype', verbose_name='relationship type')),
            ],
            options={
                'verbose_name': 'dataset citation',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='dataquality',
            name='dataqualityvalueunitsid',
            field=models.ForeignKey(blank=True, db_column='dataqualityvalueunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units', verbose_name='data quality value units'),
        ),
        migrations.CreateModel(
            name='Dataloggerprogramfiles',
            fields=[
                ('programid', models.AutoField(primary_key=True, serialize=False)),
                ('programname', models.CharField(max_length=255)),
                ('programdescription', models.CharField(blank=True, max_length=5000)),
                ('programversion', models.CharField(blank=True, max_length=50)),
                ('programfilelink', models.FileField(upload_to='dataloggerprogramfiles')),
                ('affiliationid', models.ForeignKey(db_column='affiliationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.affiliations')),
            ],
            options={
                'verbose_name': 'data logger program file',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Dataloggerfiles',
            fields=[
                ('dataloggerfileid', models.AutoField(primary_key=True, serialize=False)),
                ('dataloggerfilename', models.CharField(max_length=255, verbose_name='Data logger file name')),
                ('dataloggerfiledescription', models.CharField(blank=True, max_length=5000, verbose_name='Data logger file description')),
                ('dataloggerfilelink', models.FileField(upload_to='dataloggerfiles', verbose_name='Data logger file')),
                ('programid', models.ForeignKey(db_column='programid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.dataloggerprogramfiles')),
            ],
            options={
                'verbose_name': 'data logger file',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Dataloggerfilecolumns',
            fields=[
                ('dataloggerfilecolumnid', models.AutoField(primary_key=True, serialize=False)),
                ('columnlabel', models.CharField(max_length=50, verbose_name='column label')),
                ('columndescription', models.CharField(blank=True, help_text='To disble ingestion of a column type skip, or to specify a column as the date time enter datetime if the datetime is an excel format numeric datetime enter exceldatetime', max_length=5000, verbose_name='column description')),
                ('measurementequation', models.CharField(blank=True, max_length=255, verbose_name='measurement equation')),
                ('scaninterval', models.FloatField(blank=True, null=True, verbose_name='scan interval (time)')),
                ('recordinginterval', models.FloatField(blank=True, null=True, verbose_name='recording interval')),
                ('aggregationstatisticcv', models.ForeignKey(blank=True, db_column='aggregationstatisticcv', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvaggregationstatistic', verbose_name='aggregation statistic')),
                ('dataloggerfileid', models.ForeignKey(db_column='dataloggerfileid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.dataloggerfiles', verbose_name='data logger file')),
                ('instrumentoutputvariableid', models.ForeignKey(db_column='instrumentoutputvariableid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.instrumentoutputvariables', verbose_name='instrument output variable')),
                ('recordingintervalunitsid', models.ForeignKey(blank=True, db_column='recordingintervalunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='relatedRecordingintervalunitsid', to='dadosodm2.units', verbose_name='recording interval units')),
                ('resultid', models.ForeignKey(blank=True, db_column='resultid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.results', verbose_name='result')),
                ('scanintervalunitsid', models.ForeignKey(blank=True, db_column='scanintervalunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='relatedScanIntervalUnitsid', to='dadosodm2.units', verbose_name='scan interval units')),
            ],
            options={
                'verbose_name': 'data logger file column',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Citationexternalidentifiers',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('citationexternalidentifier', models.CharField(db_column='citationexternalidentifier', max_length=255)),
                ('citationexternalidentifieruri', models.CharField(blank=True, db_column='citationexternalidentifieruri', max_length=255)),
                ('citationid', models.ForeignKey(db_column='citationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.citations')),
                ('externalidentifiersystemid', models.ForeignKey(db_column='externalidentifiersystemid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.externalidentifiersystems')),
            ],
            options={
                'verbose_name': 'citationexternalidentifier',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Citationextensionpropertyvalues',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('propertyvalue', models.CharField(blank=True, max_length=255, null=True)),
                ('citationid', models.ForeignKey(db_column='citationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.citations')),
                ('propertyid', models.ForeignKey(db_column='propertyid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.extensionproperties')),
            ],
            options={
                'verbose_name': 'citation extension property',
                'verbose_name_plural': 'citation extension properties',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Categoricalresultvalueannotations',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('annotationid', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.annotations')),
                ('valueid', models.ForeignKey(db_column='valueid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.categoricalresultvalues')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Authorlists',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('authororder', models.IntegerField(blank=True, null=True, verbose_name='author order')),
                ('citationid', models.ForeignKey(db_column='citationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.citations', verbose_name='citation')),
                ('personid', models.ForeignKey(blank=True, db_column='personid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.people', verbose_name='person')),
            ],
            options={
                'verbose_name': 'author list',
                'verbose_name_plural': 'author list',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='annotations',
            name='annotationtypecv',
            field=models.ForeignKey(db_column='annotationtypecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvannotationtype'),
        ),
        migrations.AddField(
            model_name='annotations',
            name='annotatorid',
            field=models.ForeignKey(blank=True, db_column='annotatorid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.people'),
        ),
        migrations.AddField(
            model_name='annotations',
            name='citationid',
            field=models.ForeignKey(blank=True, db_column='citationid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.citations'),
        ),
        migrations.AddField(
            model_name='affiliations',
            name='organizationid',
            field=models.ForeignKey(blank=True, db_column='organizationid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.organizations', verbose_name='organization'),
        ),
        migrations.AddField(
            model_name='affiliations',
            name='personid',
            field=models.ForeignKey(db_column='personid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.people', verbose_name='person'),
        ),
        migrations.AddField(
            model_name='actions',
            name='action_type',
            field=models.ForeignKey(db_column='actiontypecv', help_text='A vocabulary for describing the type of actions performed in making observations. Depending on the action type, the action may or may not produce an observation result. view action type details here http://vocabulary.odm2.org/actiontype/', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvactiontype'),
        ),
        migrations.AddField(
            model_name='actions',
            name='method',
            field=models.ForeignKey(db_column='methodid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.methods'),
        ),
        migrations.CreateModel(
            name='Actionextensionpropertyvalues',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('propertyvalue', models.CharField(max_length=255)),
                ('actionid', models.ForeignKey(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.actions')),
                ('propertyid', models.ForeignKey(db_column='propertyid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.extensionproperties')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Actiondirectives',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('actionid', models.ForeignKey(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.actions')),
                ('directiveid', models.ForeignKey(db_column='directiveid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.directives')),
            ],
            options={
                'db_table': 'actiondirectives',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Actionby',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('isactionlead', models.BooleanField(verbose_name='is lead person on action')),
                ('roledescription', models.CharField(blank=True, max_length=5000, verbose_name="person's role on this action")),
                ('actionid', models.ForeignKey(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.actions', verbose_name='action')),
                ('affiliationid', models.ForeignKey(db_column='affiliationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.affiliations', verbose_name='person by affiliation')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Actionannotations',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('actionid', models.ForeignKey(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.actions')),
                ('annotationid', models.ForeignKey(db_column='annotationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.annotations')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='transectresults',
            name='intendedtimespacingunitsid',
            field=models.ForeignKey(blank=True, db_column='intendedtimespacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units'),
        ),
        migrations.AddField(
            model_name='transectresults',
            name='intendedtransectspacingunitsid',
            field=models.ForeignKey(blank=True, db_column='intendedtransectspacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units'),
        ),
        migrations.AddField(
            model_name='transectresults',
            name='spatialreferenceid',
            field=models.ForeignKey(blank=True, db_column='spatialreferenceid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.spatialreferences'),
        ),
        migrations.AddField(
            model_name='transectresults',
            name='zlocationunitsid',
            field=models.ForeignKey(blank=True, db_column='zlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units'),
        ),
        migrations.AddField(
            model_name='trajectoryresults',
            name='intendedtimespacingunitsid',
            field=models.ForeignKey(blank=True, db_column='intendedtimespacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units'),
        ),
        migrations.AddField(
            model_name='trajectoryresults',
            name='intendedtrajectoryspacingunitsid',
            field=models.ForeignKey(blank=True, db_column='intendedtrajectoryspacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units'),
        ),
        migrations.AddField(
            model_name='trajectoryresults',
            name='spatialreferenceid',
            field=models.ForeignKey(blank=True, db_column='spatialreferenceid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.spatialreferences'),
        ),
        migrations.AddField(
            model_name='timeseriesresults',
            name='intendedtimespacingunitsid',
            field=models.ForeignKey(blank=True, db_column='intendedtimespacingunitsid', help_text='Units of time between measurements. This defines the time series 1 hour, or 15 minutes for example.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units', verbose_name='Time Units'),
        ),
        migrations.AddField(
            model_name='timeseriesresults',
            name='spatialreferenceid',
            field=models.ForeignKey(blank=True, db_column='spatialreferenceid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.spatialreferences', verbose_name='spatial reference'),
        ),
        migrations.AddField(
            model_name='timeseriesresults',
            name='xlocationunitsid',
            field=models.ForeignKey(blank=True, db_column='xlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units', verbose_name='x location units'),
        ),
        migrations.AddField(
            model_name='timeseriesresults',
            name='ylocationunitsid',
            field=models.ForeignKey(blank=True, db_column='ylocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units', verbose_name='y location units'),
        ),
        migrations.AddField(
            model_name='timeseriesresults',
            name='zlocationunitsid',
            field=models.ForeignKey(blank=True, db_column='zlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units', verbose_name='z location units'),
        ),
        migrations.AddField(
            model_name='spectraresults',
            name='intendedwavelengthspacingunitsid',
            field=models.ForeignKey(blank=True, db_column='intendedwavelengthspacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units'),
        ),
        migrations.AddField(
            model_name='spectraresults',
            name='spatialreferenceid',
            field=models.ForeignKey(blank=True, db_column='spatialreferenceid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.spatialreferences'),
        ),
        migrations.AddField(
            model_name='spectraresults',
            name='xlocationunitsid',
            field=models.ForeignKey(blank=True, db_column='xlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units'),
        ),
        migrations.AddField(
            model_name='spectraresults',
            name='ylocationunitsid',
            field=models.ForeignKey(blank=True, db_column='ylocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units'),
        ),
        migrations.AddField(
            model_name='spectraresults',
            name='zlocationunitsid',
            field=models.ForeignKey(blank=True, db_column='zlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units'),
        ),
        migrations.CreateModel(
            name='Specimentaxonomicclassifiers',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('citationid', models.ForeignKey(blank=True, db_column='citationid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.citations')),
                ('taxonomicclassifierid', models.ForeignKey(db_column='taxonomicclassifierid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.taxonomicclassifiers')),
                ('samplingfeatureid', models.ForeignKey(db_column='samplingfeatureid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.specimens')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Sites',
            fields=[
                ('samplingfeatureid', models.OneToOneField(db_column='samplingfeatureid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dadosodm2.samplingfeatures', verbose_name='sampling feature')),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('sitetypecv', models.ForeignKey(db_column='sitetypecv', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.cvsitetype')),
                ('spatialreferenceid', models.ForeignKey(db_column='spatialreferenceid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.spatialreferences', verbose_name='spatial reference id')),
            ],
            options={
                'verbose_name': 'Site',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='sectionresults',
            name='intendedtimespacingunitsid',
            field=models.ForeignKey(blank=True, db_column='intendedtimespacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units'),
        ),
        migrations.AddField(
            model_name='sectionresults',
            name='intendedxspacingunitsid',
            field=models.ForeignKey(blank=True, db_column='intendedxspacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units'),
        ),
        migrations.AddField(
            model_name='sectionresults',
            name='intendedzspacingunitsid',
            field=models.ForeignKey(blank=True, db_column='intendedzspacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units'),
        ),
        migrations.AddField(
            model_name='sectionresults',
            name='spatialreferenceid',
            field=models.ForeignKey(blank=True, db_column='spatialreferenceid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.spatialreferences'),
        ),
        migrations.AddField(
            model_name='sectionresults',
            name='ylocationunitsid',
            field=models.ForeignKey(blank=True, db_column='ylocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units'),
        ),
        migrations.CreateModel(
            name='Resultnormalizationvalues',
            fields=[
                ('resultid', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dadosodm2.results')),
                ('normalizedbyreferencematerialvalueid', models.ForeignKey(db_column='normalizedbyreferencematerialvalueid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.referencematerialvalues')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Resultderivationequations',
            fields=[
                ('resultid', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='dadosodm2.results', verbose_name='data result')),
                ('derivationequationid', models.ForeignKey(db_column='derivationequationid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.derivationequations')),
            ],
            options={
                'verbose_name': 'result derivation equation',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='profileresults',
            name='intendedtimespacingunitsid',
            field=models.ForeignKey(blank=True, db_column='intendedtimespacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units', verbose_name='intended time spacing unit'),
        ),
        migrations.AddField(
            model_name='profileresults',
            name='intendedzspacingunitsid',
            field=models.ForeignKey(blank=True, db_column='intendedzspacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units', verbose_name='intended depth units'),
        ),
        migrations.AddField(
            model_name='profileresults',
            name='spatialreferenceid',
            field=models.ForeignKey(blank=True, db_column='spatialreferenceid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.spatialreferences', verbose_name='spatial reference'),
        ),
        migrations.AddField(
            model_name='profileresults',
            name='xlocationunitsid',
            field=models.ForeignKey(blank=True, db_column='xlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units', verbose_name='x location units'),
        ),
        migrations.AddField(
            model_name='profileresults',
            name='ylocationunitsid',
            field=models.ForeignKey(blank=True, db_column='ylocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units', verbose_name='y location units'),
        ),
        migrations.AddField(
            model_name='pointcoverageresults',
            name='intendedxspacingunitsid',
            field=models.ForeignKey(blank=True, db_column='intendedxspacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units'),
        ),
        migrations.AddField(
            model_name='pointcoverageresults',
            name='intendedyspacingunitsid',
            field=models.ForeignKey(blank=True, db_column='intendedyspacingunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units'),
        ),
        migrations.AddField(
            model_name='pointcoverageresults',
            name='spatialreferenceid',
            field=models.ForeignKey(blank=True, db_column='spatialreferenceid', null=True, on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.spatialreferences'),
        ),
        migrations.AddField(
            model_name='pointcoverageresults',
            name='zlocationunitsid',
            field=models.ForeignKey(blank=True, db_column='zlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units'),
        ),
        migrations.AddField(
            model_name='measurementresultvalues',
            name='resultid',
            field=models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.measurementresults', verbose_name='Result Series'),
        ),
        migrations.AddField(
            model_name='measurementresults',
            name='timeaggregationintervalunitsid',
            field=models.ForeignKey(db_column='timeaggregationintervalunitsid', on_delete=django.db.models.deletion.CASCADE, related_name='+', to='dadosodm2.units', verbose_name='time aggregation interval unit'),
        ),
        migrations.AddField(
            model_name='measurementresults',
            name='xlocationunitsid',
            field=models.ForeignKey(blank=True, db_column='xlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='relatedXlocationUnits', to='dadosodm2.units', verbose_name='x location units'),
        ),
        migrations.AddField(
            model_name='measurementresults',
            name='ylocationunitsid',
            field=models.ForeignKey(blank=True, db_column='ylocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='relatedYlocationUnits', to='dadosodm2.units', verbose_name='y location units'),
        ),
        migrations.AddField(
            model_name='measurementresults',
            name='zlocationunitsid',
            field=models.ForeignKey(blank=True, db_column='zlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='relatedZlocationUnits', to='dadosodm2.units', verbose_name='z location units'),
        ),
        migrations.AddField(
            model_name='categoricalresultvalues',
            name='resultid',
            field=models.ForeignKey(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.categoricalresults'),
        ),
        migrations.CreateModel(
            name='Calibrationstandards',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('referencematerialid', models.ForeignKey(db_column='referencematerialid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.referencematerials')),
                ('actionid', models.ForeignKey(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.calibrationactions')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Calibrationreferenceequipment',
            fields=[
                ('bridgeid', models.AutoField(primary_key=True, serialize=False)),
                ('equipmentid', models.ForeignKey(db_column='equipmentid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.equipment')),
                ('actionid', models.ForeignKey(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.calibrationactions')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='calibrationactions',
            name='instrumentoutputvariableid',
            field=models.ForeignKey(db_column='instrumentoutputvariableid', on_delete=django.db.models.deletion.CASCADE, to='dadosodm2.instrumentoutputvariables'),
        ),
    ]
